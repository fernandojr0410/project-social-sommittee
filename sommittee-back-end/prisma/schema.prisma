generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  name        String
  surname     String
  email       String     @unique
  telephone   String     @db.Char(15)
  password    String
  role        Role
  created_at  DateTime   @default(now())
  last_action String?
  tokens      Token[]
  donations   Donation[]
  donors      Donor[]
  loggers     Logger[]

  @@map("users")
}

enum Role {
  ADMIN
  MANAGER
  OPERATOR
}

model Token {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  access_token String
  is_revoked   Boolean  @default(false)
  user         User     @relation(fields: [user_id], references: [id])
  user_id      String   @db.Uuid()
  type         String   @default("login")

  @@map("tokens")
}

model Address {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  zip_code     String
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String   @db.Char(2)
  people       People[]
  families     Family[]

  @@map("address")
}

model People {
  id         String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  name       String
  surname    String
  cpf        String          @unique @db.Char(14)
  email      String          @unique
  birth_date String
  gender     Gender
  telephone  String
  work       Boolean
  education  String
  address    Address         @relation(fields: [address_id], references: [id])
  address_id String          @db.Uuid()
  families   People_Family[]

  @@map("people")
}

enum Gender {
  MALE
  FEMALE
}

model Family {
  id         String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  address    Address         @relation(fields: [address_id], references: [id])
  address_id String          @db.Uuid()
  people     People_Family[]

  @@map("families")
}

model People_Family {
  id        String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  function  String
  people    People @relation(fields: [people_id], references: [id])
  people_id String @db.Uuid()
  family    Family @relation(fields: [family_id], references: [id])
  family_id String @db.Uuid()

  @@map("people_family")
}

model Donor {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  name       String
  surname    String
  cpf        String     @unique @db.Char(14)
  email      String     @unique
  contact    String     @db.Char(15)
  type_donor Type_donor
  user       User?      @relation(fields: [user_id], references: [id])
  user_id    String?    @db.Uuid()
  donations  Donation[]

  @@map("donors")
}

enum Type_donor {
  INTERNAL
  EXTERNAL
}

model Donation {
  id                   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  description          String
  state                State
  date                 DateTime @default(now())
  address_zip_code     String
  address_street       String
  address_complement   String?
  address_neighborhood String
  address_city         String
  address_state        String   @db.Char(2)
  user                 User?    @relation(fields: [user_id], references: [id])
  user_id              String?  @db.Uuid()
  donor                Donor?   @relation(fields: [donor_id], references: [id])
  donor_id             String?  @db.Uuid()
  stocks               Stock[]

  @@map("donations")
}

enum State {
  DELIVERED
  PENDING
  CANCELED
  ON_ROUTE
}

model Product {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  name        String
  description String
  type        String
  stocks      Stock[]

  @@map("products")
}

model Stock {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  amount      String
  product     Product  @relation(fields: [product_id], references: [id])
  product_id  String   @db.Uuid()
  donation    Donation @relation(fields: [donation_id], references: [id])
  donation_id String   @db.Uuid()

  @@map("stocks")
}

model Logger {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  path       String?
  data       Json?
  status     Int      @default(0)
  method     String?
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String   @db.Uuid()
  created_at DateTime @default(now())

  @@map("loggers")
}
